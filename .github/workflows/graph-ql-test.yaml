name: GraphQL Python Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12' ]
    name: Python ${{ matrix.python-version }} sample

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Setup a proxy for testing of proxy option 
      - name: Install tinyproxy
        run: |
          sudo apt-get update
          sudo apt-get install -y tinyproxy
          
          # Configure tinyproxy to listen on 127.0.0.1:8080
          sudo sed -i 's/^Port 8888/Port 8080/' /etc/tinyproxy/tinyproxy.conf
          sudo sed -i 's/^Allow 127.0.0.1/#Allow 127.0.0.1/' /etc/tinyproxy/tinyproxy.conf
          sudo sed -i 's/^#DisableViaHeader Yes/DisableViaHeader Yes/' /etc/tinyproxy/tinyproxy.conf
          
          # Restart tinyproxy to apply the configuration
          sudo systemctl restart tinyproxy
          
          # Ensure tinyproxy is running
          sudo systemctl status tinyproxy

      # 2. Build Docker image for GraphQL server
      - name: Build GraphQL Docker image
        run: docker build -t graphql-server ./Github-test/

      # 3. Run Docker container with GraphQL server
      - name: Start GraphQL Docker container
        run: docker run -d -p 4000:4000 --name graphql-server graphql-server

      # 4. Wait for GraphQL server to be ready
      - name: Wait for GraphQL server
        run: |
          until curl -s http://localhost:4000/health; do
            echo "Waiting for GraphQL server..."
            sleep 5
          done

      # 5. Set up Python environment for the matrix version
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }} 
          architecture: x64

      # 6. Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 7. Run GraphQL-cop normal test
      - name: Run GraphQL-cop normal test
        run: python graphql-cop.py -t http://localhost:4000/

      # 8. Run GraphQL-cop force test with proxy
      - name: Run GraphQL-cop force test
        run: python graphql-cop.py -t http://localhost:4000/ -f -x http://127.0.0.1:8080

      # 9. Run GraphQL-cop normal test with HTML output
      - name: Run GraphQL-cop normal test with HTML output
        run: python graphql-cop.py -t http://localhost:4000/ -f -o htmlDebug
      - uses: actions/upload-artifact@v4
        with:
          name: graphql-test-html-report
          path: report.html
       

      # 10. Stop and remove Docker container after tests
      - name: Stop and clean up Docker container
        run: docker stop graphql-server && docker rm graphql-server
